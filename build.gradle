plugins {
    id 'application'
    id 'java'
}

description = 'a tech demo for jMonkeyEngine vehicles'
sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    //options.compilerArgs << '-Xlint:unchecked'
    //options.deprecation = true
    options.encoding = 'UTF-8'
}

tasks.withType(JavaExec) { // Java runtime options:
    enableAssertions true
    //jvmArgs '-verbose:gc'
    jvmArgs '-Xms512m', '-Xmx512m'
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

mainClassName = 'com.jayfella.jme.vehicle.lemurdemo.Main'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

repositories {
    //mavenLocal()
    jcenter()
}

project.ext {
    jmonkeyengineVersion = '3.3.2-stable'
}

dependencies {
    implementation 'org.jmonkeyengine:jme3-core:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-desktop:' + jmonkeyengineVersion
    implementation 'org.jmonkeyengine:jme3-effects:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jmonkeyengineVersion

    // Jme-vehicles doesn't use jme3-blender or jme3-plugins
    //  -- they are added solely to avoid warnings from AssetConfig
    runtimeOnly 'org.jmonkeyengine:jme3-blender:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jmonkeyengineVersion

    // non-JME dependencies:
    implementation 'com.atr:jme-ttf:2.2.2'
    implementation 'com.github.stephengold:Garrett:0.1.0'
    implementation 'com.github.stephengold:Heart:6.3.0'
    implementation 'com.github.stephengold:LemurPower:0.2.0'
    implementation 'com.github.stephengold:Minie:3.1.0+big3'
    implementation 'com.github.stephengold:SkyControl:0.9.29'
    implementation 'com.simsilica:lemur:1.14.0'
    implementation 'com.simsilica:lemur-props:1.1.1'
    runtimeOnly 'net.aaaagames:PBRTerrain:1.0.1'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.0'
    runtimeOnly 'org.codehaus.groovy:groovy-jsr223:3.0.7'
}

task debugForceDialog(type: JavaExec) {
    args = ['--forceDialog']
    classpath sourceSets.main.runtimeClasspath
    debug true
    main mainClassName
}

task runForceDialog(type: JavaExec) {
    args = ['--forceDialog']
    classpath sourceSets.main.runtimeClasspath
    main mainClassName
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')
clean.dependsOn('cleanScreenShots')
task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}
task cleanScreenShots(type: Delete) {
    delete fileTree(dir: '.', include: 'screen_shot*.png')
}
