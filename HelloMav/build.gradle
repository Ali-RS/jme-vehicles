// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

apply plugin: 'application'

description = 'a tech demo for jMonkeyEngine vehicles'

mainClassName = 'com.jayfella.jme.vehicle.simpledemo.HelloMav'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

dependencies {
    runtimeOnly 'org.jmonkeyengine:jme3-desktop:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jmonkeyengineVersion

    // Jme-vehicles doesn't use jme3-blender or jme3-plugins
    //  -- they are added solely to avoid warnings from AssetConfig
    runtimeOnly 'org.jmonkeyengine:jme3-blender:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jmonkeyengineVersion

    // non-JME dependencies:
    implementation 'com.github.stephengold:Garrett:0.1.0'
    implementation 'com.github.stephengold:JmePower:0.3.0'
    runtimeOnly 'net.aaaagames:PBRTerrain:1.0.1'

    implementation project(':MavCommon')
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')
clean.dependsOn('cleanScreenShots')
task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}
